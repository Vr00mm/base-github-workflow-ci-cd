name: docker-helm
on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'
jobs:
  infos:
    name: Releaser
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get-Version
        uses: vr00mm/github-action-semver@v0.9.2
        id: get-version
    outputs:
      CURRENT_VERSION: ${{ steps.get-version.outputs.CURRENT_VERSION }}
      NEXT_VERSION: ${{ steps.get-version.outputs.NEXT_VERSION }}

  print-infos:
    needs: infos
    name: Print Infos
    runs-on: ubuntu-latest
    steps:
      - name: Print-Version
        run: |
          echo CURRENT_VERSION: ${{ needs.infos.outputs.CURRENT_VERSION }}
          echo NEXT_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
      - name: Print-Env
        run: printenv
      - name: Print github.ref
        run: |
          echo github.ref ${{ github.ref }}
      - name: Print 
        run: 

  golangci:
    name: GoLint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          # Optional: version of golangci-lint to use in form of v1.2 or v1.2.3 or `latest` to use the latest version
          version: v1.29

          # Optional: working directory, useful for monorepos
          working-directory: .github/workspace/src

          # Optional: golangci-lint command line arguments.
          # args: --issues-exit-code=0

          # Optional: show only new issues if it's a pull request. The default value is `false`.
          # only-new-issues: true

          # Optional: if set to true then the action will use pre-installed Go.
          # skip-go-installation: true

          # Optional: if set to true then the action don't cache or restore ~/go/pkg.
          # skip-pkg-cache: true

          # Optional: if set to true then the action don't cache or restore ~/.cache/go-build.
          # skip-build-cache: true

  docker-build:
    needs: infos
    name: "ild Container Image"
    runs-on: ubuntu-latest
    container:
      image: docker:dind
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Load Workspace
        uses: actions/checkout@v1
      - name: Build Docker Image
        run: |
          # TODO Remove this ugly this
          APP_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]' `

          docker build "${GITHUB_WORKSPACE}/docker"                               \
          -t "${{ secrets.CI_REGISTRY }}/${APP_NAME}:${APP_VERSION}"              \
          --build-arg APP_NAME="${APP_NAME}"                                      \
          --build-arg GIT_REPOSITORY="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"  \
          --build-arg BRANCH="${GITHUB_REF}"                                      \
          --build-arg COMMIT="${GITHUB_SHA}"                                      \
          --build-arg BUILD_DATE="$(date)"                                        \
          --build-arg BUILD_NB="${GITHUB_RUN_NUMBER}"                             \
          --build-arg APP_VERSION="${APP_VERSION}"                                \
          --build-arg DOCKER_VERSION="$(docker --version)"                        \
          --build-arg GO_BUILDER=test                                             \
          --build-arg WORKSPACE="${GITHUB_WORKSPACE}"

  docker-push:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [infos, docker-build]
    name: "Push Container Image"
    runs-on: ubuntu-latest
    container:
      image: docker:dind
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Push Docker Image to Registry
        run: |
          # TODO remove this ugly fix
          APP_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]'`

          echo ${{ secrets.CI_REGISTRY_TOKEN }} | docker login -u${{ secrets.CI_REGISTRY_USERNAME }} --password-stdin ${{ secrets.CI_REGISTRY }}
          docker push "${{ secrets.CI_REGISTRY }}/${APP_NAME}:${APP_VERSION}"

  helm-package:
    needs: [infos, docker-build, docker-push]
    name: "Package Helm Chart"
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v1

      - name: Configure helm
        run: echo "myconfig" > .helm

      - name: Helm lint
        run: helm lint ${GITHUB_WORKSPACE}/helm/my-chart

      - name: Helm Package
        run: helm package ${GITHUB_WORKSPACE}/helm/my-chart --app-version ${APP_VERSION}

      - name: helm push
        run: echo helm push ${GITHUB_WORKSPACE}/helm/my-chart-1.0.0.tgz

  deploy-dry-run-on-cluster:
    name: "Deploying Helm Chart on kind cluster"
    needs: [infos, docker-build, docker-push, helm-build]
    runs-on: ubuntu-latest
    strategy:
        matrix:
           node: 
            - "v1.21.2"
            - "v1.17.17"
            - "v1.16.15"
            - "v1.18.19"
            - "v1.15.12"
            - "v1.19.11"
            - "v1.20.7"
            - "v1.14.10"
    container:
      image: alpine:latest
    steps:
      - name: Install Requirements
        run: apk update && apk add curl

      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin/

      - name: Install helm
        run: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Install kubectl 
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Create cluster
        run: kind create cluster --image=kindest/node:${{ matrix.node }}

      - name: Test Chart installation
        run: |
          helm upgrade --install "${GITHUB_REPOSITORY}-dry-run" ${GITHUB_WORKSPACE}/helm/my-chart-1.0.0.tgz -n dry-run --wait --create-namespace=true
          kubectl wait --for=condition=Ready pod --all -n dry-run --timeout=300s

  release:
    if: startsWith(${{ github.ref }}, 'refs/tags/v')
    name: Release
    needs: [infos, docker-build, helm-build, deploy-dry-run-on-cluster]
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: helm upgrade install package-version-1.0.0.tgz

  deploy:
    name: "Deploy Release"
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [infos, docker-build, helm-build, release, deploy-dry-run-on-cluster]
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: helm upgrade install package-version-1.0.0.tgz

  post-always:
    name: Result
    if: always()
    needs: [infos, docker-build, helm-build, deploy-dry-run-on-cluster, release, deploy]
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
      - name: Happy Helming
        run: printenv

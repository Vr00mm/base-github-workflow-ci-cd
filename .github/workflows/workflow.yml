name: docker-helm
on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'
jobs:
  infos:
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get-Version
        uses: vr00mm/github-action-semver@v0.9.2
        id: get-version
    outputs:
      CURRENT_VERSION: ${{ steps.get-version.outputs.CURRENT_VERSION }}
      NEXT_VERSION: ${{ steps.get-version.outputs.NEXT_VERSION }}

  print-infos:
    needs: infos
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
      - name: Print-Version
        run: |
          echo CURRENT_VERSION: ${{ needs.infos.outputs.CURRENT_VERSION }}
          echo NEXT_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
      - name: Print-Env
        run: printenv

  docker-build:
    needs: infos
    runs-on: ubuntu-latest
    container:
      image: docker:dind
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Load Workspace
        uses: actions/checkout@v1
      - name: Build Docker Image
        run: |
          # TODO Remove this ugly this
          APP_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]' `

          docker build "${GITHUB_WORKSPACE}/docker"                               \
          -t "${{ secrets.CI_REGISTRY }}/${APP_NAME}:${APP_VERSION}"              \
          --build-arg APP_NAME="${APP_NAME}"                                      \
          --build-arg GIT_REPOSITORY="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}"  \
          --build-arg BRANCH="${GITHUB_REF}"                                      \
          --build-arg COMMIT="${GITHUB_SHA}"                                      \
          --build-arg BUILD_DATE="$(date)"                                        \
          --build-arg BUILD_NB="${GITHUB_RUN_NUMBER}"                             \
          --build-arg APP_VERSION="${APP_VERSION}"                                \
          --build-arg DOCKER_VERSION="$(docker --version)"                        \
          --build-arg GO_BUILDER=test                                             \
          --build-arg WORKSPACE="${GITHUB_WORKSPACE}"

  docker-push:
    if: ${{ github.head_ref == 'develop' || github.head_ref == 'master' }}
    needs: [infos, docker-build]
    runs-on: ubuntu-latest
    container:
      image: docker:dind
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
      volumes:
        - /var/run/docker.sock:/var/run/docker.sock
    steps:
      - name: Push Docker Image to Registry
        run: |
          # TODO remove this ugly fix
          APP_NAME=`echo ${GITHUB_REPOSITORY} |sed -e tr '[:upper:]' '[:lower:]'`

          echo ${{ secrets.CI_REGISTRY_TOKEN }} | docker login -u${{ secrets.CI_REGISTRY_USERNAME }} --password-stdin ${{ secrets.CI_REGISTRY }}
          docker push "${{ secrets.CI_REGISTRY }}/${APP_NAME}:${APP_VERSION}"

  helm-build:
    needs: [infos, docker-build]
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v1

      - name: Configure helm
        run: echo "myconfig" > .helm

      - name: Helm lint
        run: helm lint ${GITHUB_WORKSPACE}/helm/my-chart

      - name: Helm Package
        run: helm package ${GITHUB_WORKSPACE}/helm/my-chart --app-version ${APP_VERSION}

      - name: helm push
        run: echo helm push ${GITHUB_WORKSPACE}/helm/my-chart-1.0.0.tgz

  deploy-dry-run:
    needs: [infos, docker-build, helm-build]
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: echo helm upgrade install package-version-1.0.0.tgz

  release:
    if: ${{ startsWith(github.ref, 'refs/tags/v' }}
    needs: [infos, docker-build, helm-build, deploy-dry-run]
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: echo helm upgrade install package-version-1.0.0.tgz

  deploy:
    if: ${{ github.head_ref == 'master') }}
    needs: [infos, docker-build, helm-build, release, deploy-dry-run]
    runs-on: ubuntu-latest
    container:
      image: alpine/helm
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: echo helm upgrade install package-version-1.0.0.tgz

  post-always:
    if: always()
    needs: [infos, docker-build, helm-build, deploy-dry-run, release, deploy]
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
      - name: Happy Helming
        run: printenv

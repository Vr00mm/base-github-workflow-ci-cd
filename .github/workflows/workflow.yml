name: docker-Helm
on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'
jobs:
  infos:
    name: Get Infos
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get-Version
        uses: vr00mm/github-action-semver@v0.9.2
        id: get-version
      - name: Get-AppName
        id: appName
        run: |
          APP_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]'`
          echo "::set-output name=APP_NAME::${APP_NAME}"
    outputs:
      CURRENT_VERSION: ${{ steps.get-version.outputs.CURRENT_VERSION }}
      NEXT_VERSION: ${{ steps.get-version.outputs.NEXT_VERSION }}
      APP_NAME: ${{ steps.appName.outputs.APP_NAME }}

  print-infos:
    needs: infos
    name: Print Infos
    runs-on: ubuntu-latest
    steps:
      - name: Print-Version
        run: |
          echo CURRENT_VERSION: ${{ needs.infos.outputs.CURRENT_VERSION }}
          echo NEXT_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
      - name: Print-Env
        run: printenv
      - name: Print github.ref
        run: echo github.ref ${{ github.ref }}
      - name: Print workspace content
        run:  ls ${GITHUB_WORKSPACE}
      - name: ipa
        run: ip a

  go-lint:
    name: GoLint
    needs: infos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
          working-directory: "./src"

  helm-lint:
    needs: [infos]
    name: "HelmLint"
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: Helm lint
        run: helm lint ./helm/my-chart

  docker-build:
    needs: [infos, go-lint]
    name: "Build Container Image"
    runs-on: ubuntu-latest
    env:
      APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./docker/Dockerfile
          tags: ${{ secrets.CI_REGISTRY }}/${{ needs.infos.outputs.APP_NAME }}:${{ needs.infos.outputs.NEXT_VERSION }}
          build-args: APP_NAME="${APP_NAME}",GIT_REPOSITORY="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}",BRANCH="${GITHUB_REF}",COMMIT="${GITHUB_SHA}",BUILD_DATE="$(date)",BUILD_NB="${GITHUB_RUN_NUMBER}",APP_VERSION="${APP_VERSION}",DOCKER_VERSION="$(docker --version)",GO_BUILDER="test",WORKSPACE="${GITHUB_WORKSPACE}"
          outputs: type=docker,dest=/tmp/docker.tar

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker.tar
          path: /tmp/docker.tar

  helm-package:
    needs: [infos, docker-build, helm-lint]
    name: "Package Helm Chart"
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
        APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: Helm lint
        run: helm lint ${GITHUB_WORKSPACE}/helm/my-chart
      - name: Helm Package
        run: helm package ${GITHUB_WORKSPACE}/helm/my-chart --app-version ${APP_VERSION} --destination /tmp/chart.tgz
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: chart.tgz
          path: /tmp/chart.tgz


  # We should download the docker and helm artifact and test a deployment
  # We should use a custom image to get faster
  deploy-on-kind:
    name: "Deploying Helm Chart on kind cluster"
    needs: [infos, docker-build, helm-package]
    runs-on: ubuntu-latest
    env:
      APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
      APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
      KUBECONFIG: "/tmp/kubernetes/admin.conf"
    strategy:
        matrix:
           node:
            - "v1.21.2"
#            - "v1.17.17"
#            - "v1.18.19"
#            - "v1.19.11"
#            - "v1.20.7"
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: docker.tar
          path: /tmp

      - uses: azure/setup-kubectl@v1
        id: install

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0

      - uses: azure/setup-helm@v1
        with:
          version: 'v3.7.1' # default is latest stable

      - name: Download Chart artifact
        uses: actions/download-artifact@v2
        with:
          name: chart.tgz
          path: /tmp/chart.tgz

      - name: Unpack chart
        run: tar xzvf /tmp/chart.tgz

      - name: Test
        run: |
          kubectl cluster-info --context kind-chart-testing
          kubectl get storageclass standard

      - name: Dry-Run installation
        run: |
          helm version
          helm upgrade --install "my-chart" /tmp/chart.tgz -n 'dry-run' --create-namespace --dry-run

      - name: Test Chart installation
        run: |
          helm upgrade --install "my-chart" /tmp/chart.tgz -n "dry-run" --create-namespace --wait
          #kubectl wait --for=condition=Ready pod --all -n "dry-run" --timeout=300s

  docker-push:
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [infos, docker-build, deploy-on-kind]
    name: "Push Container Image"
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
      APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Download Container artifact
        uses: actions/download-artifact@v2
        with:
          name: docker.tar
          path: /tmp

      - name: Load Docker image
        run: docker load --input /tmp/${{ needs.infos.outputs.NEXT_VERSION }}.tar

      - name: Push Docker Image to Registry
        run: |
          echo ${{ secrets.CI_REGISTRY_TOKEN }} | docker login -u${{ secrets.CI_REGISTRY_USERNAME }} --password-stdin ${{ secrets.CI_REGISTRY }} 2>/dev/null
          docker tag "${{ secrets.CI_REGISTRY }}/${APP_NAME}:${APP_VERSION}" "${{ secrets.CI_REGISTRY }}/${APP_NAME}:latest"
          docker push "${{ secrets.CI_REGISTRY }}/${APP_NAME}:${APP_VERSION}"
          docker push "${{ secrets.CI_REGISTRY }}/${APP_NAME}:latest"

  helm-push:
    needs: [infos, helm-package, deploy-on-kind]
    name: "Push Helm Chart"
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: helm push
        run: echo helm push ${GITHUB_WORKSPACE}/helm/my-chart-1.0.0.tgz

  release:
    if: startsWith(${{ github.ref }}, 'refs/tags/v')
    name: Release
    needs: [infos, docker-push, helm-push, deploy-on-kind]
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: helm upgrade install package-version-1.0.0.tgz

  deploy:
    name: "Deploy Release"
    if: ${{ github.ref == 'refs/heads/master' }}
    needs: [infos, docker-build, helm-package, release, deploy-on-kind]
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: helm upgrade install package-version-1.0.0.tgz

  post-always:
    name: Result
    if: always()
    needs: [infos, docker-build, helm-package, deploy-on-kind, release, deploy]
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
      - name: Happy Helming
        run: printenv

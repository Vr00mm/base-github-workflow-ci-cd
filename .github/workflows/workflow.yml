name: Release
on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'support/**'
  pull_request:
    branches:
      - 'master'
      - 'main'
      - 'develop'

jobs:
  infos:
    name: Get Infos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Get-Version
        uses: vr00mm/github-action-semver@v0.9.2
        id: get-version
      - name: Get-AppRepo
        id: appRepo
        run: |
          APP_REPO=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]' | awk -F/ '{print $1}'`
          echo "::set-output name=APP_REPO::${APP_REPO}"
      - uses: dorny/paths-filter@v2
        id: appChanges
        with:
          filters: |
            src:
              - 'src/**'
              - 'docker/**'
      - uses: dorny/paths-filter@v2
        id: chartChanges
        with:
          filters: |
            src:
              - 'helm/**'
      - name: Get-AppName
        id: appName
        run: |
          APP_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]' | awk -F/ '{print $2}'`
          echo "::set-output name=APP_NAME::${APP_NAME}"
      - name: Get-GithubInfos
        id: githubInfos
        run: |
          echo "::set-output name=GITHUB_SERVER_URL::${GITHUB_SERVER_URL}"
          echo "::set-output name=GITHUB_REPOSITORY::${GITHUB_REPOSITORY}"
          echo "::set-output name=GITHUB_REF::${GITHUB_REF}"
          echo "::set-output name=GITHUB_SHA::${GITHUB_SHA}"
          echo "::set-output name=GITHUB_RUN_NUMBER::${GITHUB_RUN_NUMBER}"
          echo "::set-output name=GITHUB_WORKSPACE::${GITHUB_WORKSPACE}"

    outputs:
      CURRENT_VERSION: ${{ steps.get-version.outputs.CURRENT_VERSION }}
      NEXT_VERSION: ${{ steps.get-version.outputs.NEXT_VERSION }}
      APP_REPO: ${{ steps.appRepo.outputs.APP_REPO }}
      APP_NAME: ${{ steps.appName.outputs.APP_NAME }}

      APP_CHANGES: ${{ steps.appChanges.outputs.src }}
      CHART_CHANGES: ${{ steps.chartChanges.outputs.src }}

      GITHUB_SERVER_URL: ${{ steps.githubInfos.outputs.GITHUB_SERVER_URL }}
      GITHUB_REPOSITORY: ${{ steps.githubInfos.outputs.GITHUB_REPOSITORY }}
      GITHUB_REF: ${{ steps.githubInfos.outputs.GITHUB_REF }}
      GITHUB_SHA: ${{ steps.githubInfos.outputs.GITHUB_SHA }}
      GITHUB_RUN_NUMBER: ${{ steps.githubInfos.outputs.GITHUB_RUN_NUMBER }}
      GITHUB_WORKSPACE: ${{ steps.githubInfos.outputs.GITHUB_WORKSPACE }}

  print-infos:
    needs: infos
    name: Print Infos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Print-Changes
        run: |
          echo "## CHANGES DETECTED"
          echo "    APP_CHANGE    -> " ${{ needs.infos.outputs.APP_CHANGES }}
          echo "    CHART_CHANGE  -> " ${{ needs.infos.outputs.CHART_CHANGES }}

      - name: Print-Infos
        run: |
          echo "## APP INFOS"
          echo "    APP_REPO:         -> " ${{ needs.infos.outputs.APP_REPO }}
          echo "    APP_NAME:         -> " ${{ needs.infos.outputs.APP_NAME }}
          echo "    CURRENT_VERSION:  -> " ${{ needs.infos.outputs.CURRENT_VERSION }}
          echo "    NEXT_VERSION:     -> " ${{ needs.infos.outputs.NEXT_VERSION }}
      
      - name: Print-GithubInfos
        run: |
          echo "## GITHUB INFOS"
          echo "    GITHUB_SERVER_URL -> " ${{ needs.infos.outputs.GITHUB_SERVER_URL }}
          echo "    GITHUB_REPOSITORY -> " ${{ needs.infos.outputs.GITHUB_REPOSITORY }}
          echo "    GITHUB_REF:       -> " ${{ needs.infos.outputs.GITHUB_REF }}
          echo "    GITHUB_SHA:       -> " ${{ needs.infos.outputs.GITHUB_SHA }}
          echo "    GITHUB_RUN_NUMBER -> " ${{ needs.infos.outputs.GITHUB_RUN_NUMBER }}
          echo "    GITHUB_WORKSPACE  -> " ${{ needs.infos.outputs.GITHUB_WORKSPACE }}

      - name: Print-Env
        run: printenv

  go-lint:
    name: GoLint
    needs: infos
    if: ${{ needs.infos.outputs.APP_CHANGES == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
          working-directory: "./src"

  helm-lint:
    needs: [infos]
    name: "HelmLint"
    if: ${{ needs.infos.outputs.CHART_CHANGES == 'true' || needs.infos.outputs.APP_CHANGES == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.2.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
        APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2
      - name: Helm lint
        run: helm lint ./helm/${APP_NAME}
      - run: echo ::set-output name=status::success
        id: helm-lint
    outputs:
      STATUS: ${{ steps.helm-lint.outputs.status }} 
  helm-doc:
    needs: [infos]
    name: "Helm documentation"
    runs-on: ubuntu-latest
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2

      - name: Generate Documentation
        id: doc-gen
        run: |
          set -x
          git config --local user.name "[CI/CD]:"
          git config --local user.email ""
          echo ::set-output name=status::success

          currentBranch=${{ needs.infos.outputs.GITHUB_REF }}
          currentBranch=${currentBranch##*/}

          newFeature=${currentBranch}-doc-update

          git checkout -b feature/${newFeature}
          ./bin/helm-docs -t README_chart.md.gotpl --chart-search-root ./helm
          
          diff=`git diff |wc -l`
          if [[ $diff != 0 ]]; then
            git status
            git add .
            git commit -sm "Auto regenerate helm documentation"
            git checkout ${currentBranch}
            git merge feature/${newFeature}
            git branch -d feature/${newFeature}
            git push
            echo ::set-output name=status::error
          fi

      - name: Push changes # push the output folder to your repo
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          force: true

      - name: Result
        run: |
          [[ "${{steps.doc-gen.outputs.status == 'error' }}" ]] && echo "Generated Documentations"

  docker-build-push:
    needs: [infos, go-lint, helm-doc]
    name: "Build Container Image"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      - name: Build Infos
        id: buildInfos
        run: |
          echo "::set-output name=CUR_DATE::$(date)"
          echo "::set-output name=DOCKER_VERSION::$(docker --version)"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          build-args: |
            APP_NAME=${{ needs.infos.outputs.APP_NAME }}
            GIT_REPOSITORY=${{ needs.infos.outputs.GITHUB_SERVER_URL }}/${{ needs.infos.outputs.GITHUB_REPOSITORY }}           
            BRANCH=${{ needs.infos.outputs.GITHUB_REF }}
            COMMIT=${{ needs.infos.outputs.GITHUB_SHA }}
            BUILD_DATE=${{ steps.buildInfos.outputs.CUR_DATE }}
            BUILD_NB=${{ needs.infos.outputs.GITHUB_RUN_NUMBER }}
            APP_VERSION=${{ needs.infos.outputs.NEXT_VERSION }}
            DOCKER_VERSION=${{ steps.buildInfos.outputs.DOCKER_VERSION }}
            GO_VERSION=1.17
            WORKSPACE=${{ needs.infos.outputs.GITHUB_WORKSPACE }}
            DOCKER_HUB=${{ secrets.DOCKER_REGISTRY }}/${{ needs.infos.outputs.APP_REPO }}/${{ needs.infos.outputs.APP_NAME }}:${{ needs.infos.outputs.NEXT_VERSION }}"
          context: .
          push: true
          file: ./docker/Dockerfile
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ needs.infos.outputs.APP_REPO }}/${{ needs.infos.outputs.APP_NAME }}:${{ needs.infos.outputs.NEXT_VERSION }}

      - name: Tag latest
        run: |
          if [[ "${{github.ref}}" == "refs/tags/v"* ]]; then
            docker tag ${{ secrets.DOCKER_REGISTRY }}/${{ needs.infos.outputs.APP_REPO }}/${{ needs.infos.outputs.APP_NAME }}:${{ needs.infos.outputs.NEXT_VERSION }} ${{ secrets.DOCKER_REGISTRY }}/${{ needs.infos.outputs.APP_REPO }}/${{ needs.infos.outputs.APP_NAME }}:latest
            docker push ${{ secrets.DOCKER_REGISTRY }}/${{ needs.infos.outputs.APP_REPO }}/${{ needs.infos.outputs.APP_NAME }}:latest
          fi
      - run: echo ::set-output name=status::success
        id: docker-status
    outputs:
      STATUS: ${{ steps.docker-status.outputs.status }}

  helm-package-push:
    needs: [infos, helm-doc, docker-build-push]
    if: ${{ always() && needs.helm-lint.outputs.STATUS == 'success' }}
    name: "Package Helm Chart"
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.2.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
        APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
        HELM_REPO: ${{ secrets.HELM_REGISTRY }}
        HELM_REPO_USERNAME: ${{ secrets.HELM_REGISTRY_USERNAME }}
        HELM_REPO_PASSWORD: ${{ secrets.HELM_REGISTRY_PASSWORD }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2

      - name: Helm Push
        run: |
          helm cm-push --force \
            --version "${APP_VERSION}"  \
            --app-version "${APP_VERSION}" \
            "${GITHUB_WORKSPACE}/helm/${APP_NAME}" "${HELM_REPO}"
      - run: echo ::set-output name=status::success
        id: helm-package-status
    outputs:
      STATUS: ${{ steps.helm-package-status.outputs.status }}   

  deploy-dry-run:
    name: "Dry Run Deploy"
    needs: [infos, helm-package-push, docker-build-push]
    if: ${{ always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/tags/v*') && needs.helm-package-push.outputs.STATUS == 'success' }}
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.2.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
        APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
        HELM_REPO: ${{ secrets.HELM_REGISTRY }}
        HELM_REPO_USERNAME: ${{ secrets.HELM_REGISTRY_USERNAME }}
        HELM_REPO_PASSWORD: ${{ secrets.HELM_REGISTRY_PASSWORD }}
        KUBECONFIG: "/tmp/kubeconfig"
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2

      - name: Init Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > ${KUBECONFIG}
          chmod 0600 ${KUBECONFIG}

      - name: Add Helm Registry
        run: |
          helm repo add private-registry "${HELM_REPO}" --username ${HELM_REPO_USERNAME} --password ${HELM_REPO_PASSWORD}
          helm repo update

      - name: Deploy Dry-Run
        run: |
          helm upgrade --install "${APP_NAME}" "private-registry/${APP_NAME}" --namespace "${APP_NAME}" --create-namespace --dry-run

      - run: echo ::set-output name=status::success
        id: dryrun-status

    outputs:
      STATUS: ${{ steps.dryrun-status.outputs.status }}

  deploy:
    name: "Deploy"
    needs: [infos, deploy-dry-run, helm-doc]
    if: ${{ always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/tags/v*') && needs.deploy-dry-run.outputs.STATUS == 'success' }}
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.2.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
        APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
        HELM_REPO: ${{ secrets.HELM_REGISTRY }}
        HELM_REPO_USERNAME: ${{ secrets.HELM_REGISTRY_USERNAME }}
        HELM_REPO_PASSWORD: ${{ secrets.HELM_REGISTRY_PASSWORD }}
        KUBECONFIG: "/tmp/kubeconfig"
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2

      - name: Init Kubeconfig
        run: |
          echo "${{ secrets.KUBECONFIG }}" > ${KUBECONFIG}
          chmod 0600 ${KUBECONFIG}

      - name: Add Helm Registry
        run: |
          helm repo add private-registry "${HELM_REPO}" --username ${HELM_REPO_USERNAME} --password ${HELM_REPO_PASSWORD}
          helm repo update

      - name: Deploy Dry-Run
        run: |
          helm upgrade --install "${APP_NAME}" "private-registry/${APP_NAME}" --namespace "${APP_NAME}" --create-namespace

      - run: echo ::set-output name=status::success
        id: deploy-status
    outputs:
      STATUS: ${{ steps.deploy-status.outputs.status }}

  release:
#    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    if: contains(github.ref, 'refs/tags/')
    name: Release
    needs: [infos, deploy]
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: helm upgrade install package-version-1.0.0.tgz

  post-always:
    name: Result
    if: always()
    needs: [infos, deploy]
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
      - name: Happy Helming
        run: printenv

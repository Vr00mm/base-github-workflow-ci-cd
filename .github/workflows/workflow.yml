name: docker-Helm
on:
  workflow_dispatch:
  push:
    branches:
      - 'master'
  pull_request:
    branches:
      - 'master'
jobs:

  infos:
    name: Get Infos
    runs-on: ubuntu-latest
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Get-Version
        uses: vr00mm/github-action-semver@v0.9.2
        id: get-version

      - name: Get-AppRepo
        id: appRepo
        run: |
          APP_REPO=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]' | awk -F/ '{print $1}'`
          echo "::set-output name=APP_REPO::${APP_REPO}"

      - name: Get-AppName
        id: appName
        run: |
          APP_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]' | awk -F/ '{print $2}'`
          echo "::set-output name=APP_NAME::${APP_NAME}"

    outputs:
      CURRENT_VERSION: ${{ steps.get-version.outputs.CURRENT_VERSION }}
      NEXT_VERSION: ${{ steps.get-version.outputs.NEXT_VERSION }}
      APP_REPO: ${{ steps.appRepo.outputs.APP_REPO }}
      APP_NAME: ${{ steps.appName.outputs.APP_NAME }}

  print-infos:
    needs: infos
    name: Print Infos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Print-Infos
        run: |
          echo APP_REPO: ${{ needs.infos.outputs.APP_REPO }}
          echo APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
          echo CURRENT_VERSION: ${{ needs.infos.outputs.CURRENT_VERSION }}
          echo NEXT_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}

      - name: Print-Env
        run: printenv

      - name: Print github.ref
        run: echo github.ref ${{ github.ref }}

      - name: Print workspace content
        run:  ls ${GITHUB_WORKSPACE}

  go-lint:
    name: GoLint
    needs: infos
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
          working-directory: "./src"

  helm-lint:
    needs: [infos]
    name: "HelmLint"
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
        APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2

      - name: Helm lint
        run: helm lint ./helm/${APP_NAME}

  docker-build-push:
    needs: [infos, go-lint, helm-lint]
    name: "Build Container Image"
    runs-on: ubuntu-latest
    env:
      APP_REPO: ${{ needs.infos.outputs.APP_REPO }}
      APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
      APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./docker/Dockerfile
          platforms: linux/amd64
          tags: ${{ secrets.DOCKER_REGISTRY }}/${{ needs.infos.outputs.APP_REPO }}/${{ needs.infos.outputs.APP_NAME }}:${{ needs.infos.outputs.NEXT_VERSION }}
          build-args: APP_NAME="${APP_NAME}",GIT_REPOSITORY="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}",BRANCH="${GITHUB_REF}",COMMIT="${GITHUB_SHA}",BUILD_DATE="$(date)",BUILD_NB="${GITHUB_RUN_NUMBER}",APP_VERSION="${APP_VERSION}",DOCKER_VERSION="$(docker --version)",GO_BUILDER="test",WORKSPACE="${GITHUB_WORKSPACE},DOCKER_HUB="${{ secrets.DOCKER_REGISTRY }}/${{ needs.infos.outputs.APP_REPO }}/${{ needs.infos.outputs.APP_NAME }}:${{ needs.infos.outputs.NEXT_VERSION }}"

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}


        
  helm-package-push:
    needs: [infos, docker-build-push]
    name: "Package Helm Chart"
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.2.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
        APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
        CHARTMUSEUM_URL: ${{ secrets.HELM_REGISTRY }}
        HELM_REPO_USERNAME: ${{ secrets.HELM_REGISTRY_USERNAME }}
        HELM_REPO_PASSWORD: ${{ secrets.HELM_REGISTRY_PASSWORD }}
    steps:
      - name: Load Workspace
        uses: actions/checkout@v2

      - name: Helm Package
        run: |
          helm dependency update ${GITHUB_WORKSPACE}/helm/${APP_NAME}
          helm package ${GITHUB_WORKSPACE}/helm/${APP_NAME} --destination ${GITHUB_WORKSPACE}/helm/${APP_NAME}-${APP_VERSION}.tgz

      - name: Helm Push
        run: |
          helm cm-push "${GITHUB_WORKSPACE}/helm/${APP_NAME}-${APP_VERSION}.tgz" "${CHARTMUSEUM_URL}" \
            --version "${APP_VERSION}"  \
            --app-version "${APP_VERSION}"
 
  deploy-dry-run:
    name: "Dry Run Deploy"
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/tags/v*' }}
    needs: [helm-package-push]
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        APP_VERSION: ${{ needs.infos.outputs.NEXT_VERSION }}
        APP_NAME: ${{ needs.infos.outputs.APP_NAME }}
        KUBECONFIG: "/tmp/kubernetes/admin.conf"
    steps:
      - name: helm dry-run
        run: helm upgrade install package-version-1.0.0.tgz


  release:
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
#    if: startsWith(${{ github.ref }}, 'refs/tags/v')
    name: Release
    needs: [infos, deploy-dry-run]
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: helm upgrade install package-version-1.0.0.tgz

  deploy:
    name: "Deploy"
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/tags/v*' }}
    needs: [infos, docker-build-push, helm-package-push, deploy-dry-run]
    runs-on: ubuntu-latest
    container:
      image: vr00mm/docker-helm-client:v0.1.0
      env:
        ENV_VAR: test-helm
    steps:
      - name: helm dry-run
        run: helm upgrade install package-version-1.0.0.tgz

  post-always:
    name: Result
    if: always()
    needs: [deploy]
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    steps:
      - name: Happy Helming
        run: printenv
